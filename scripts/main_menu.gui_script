local druid = require("druid.druid")
local game_card = require("gui.components.game_card")
local game_select = require("gui.components.game_select")

local function animate_title(self)
    gui.animate(self.titel_anchor, "scale.y", 1.05, gui.EASING_INOUTSINE, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
end
local function move_down(self)
    gui.animate(self.titel_anchor, "position.y", -280.0, gui.EASING_INCIRC, 0.3, 0, function()
        gui.animate(self.titel_anchor, "scale.y", 0.8, gui.EASING_OUTSINE, 0.1, 0, function()
            for i = 1, 2 do
                gui.play_particlefx(gui.get_node("impact" .. i))
            end
            AudioManager:play_oneshot("luggage")
            gui.animate(self.titel_anchor, "scale.y", 1, gui.EASING_OUTELASTIC, 1, 0, function()
                animate_title(self)
            end)
        end)
    end)
end


function init(self)
    msg.post(".", "acquire_input_focus")
    self.druid = druid.new(self)
    self.game_card_prefab = gui.get_node("game_card/root")
    self.titel_anchor = gui.get_node("title_anchor")
    self.title = gui.get_node("title")
    move_down(self)
    gui.play_particlefx(gui.get_node("shape_loop"))
    self.scroll = self.druid:new_scroll("scroll_container", "grid_container")
    local grid_count = (gui.get_layout() == hash("Portrait")) and 1 or 2
    self.grid = self.druid:new_grid("grid_container", self.game_card_prefab, grid_count)
    for i = 1, 2 do
        local new_card = gui.clone_tree(self.game_card_prefab)
        local card = self.druid:new_widget(game_card, "game_card", new_card, i)
        gui.set_enabled(card.root, true)
        self.grid:add(card.root)
    end
    self.game_select = self.druid:new_widget(game_select, "game_select")
    self.scroll:bind_grid(self.grid)
    gui.set_enabled(self.game_card_prefab, false)

    AudioManager:play_music("main_menu", { speed = 1, gain = 0.5 })
end

function on_input(self, action_id, action)
    self.druid:on_input(action_id, action)
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
    if message_id == hash("show_game_select") then
        self.game_select:show(message.room_type)
    end
end

function update(self, dt)
    self.druid:update(dt)
end

function final(self)
    self.druid:final()
    AudioManager:fade_out_music("main_menu", 0.1)
end
